pipeline {
    agent any

    stages {
        stage('Checkout') {
            steps {
                // Checkout your source code from the repository
                // Replace the repository URL and credentials as needed
                select checkout from jenkins
            }
        }
        stage('Build'){
              steps {
                      select git:Git
                      batch windows cmd
                     }
         }
 stage('test'){
              steps {
                      select git:Git
                      echo "job tested successfully"                      
                     }
         }
                 



#Linux Ubuntu
pipeline {
    agent any
    
    environment {
        SONAR_HOST_URL = 'http://172.17.0.3:9000'
        SONAR_PROJECT_KEY = 'Sumaya_Project'
        SONAR_LOGIN = 'admin'
        SONAR_PASSWORD = 'sumaya'
        SONAR_TOKEN = 'sqp_3234ae5b716b9671053c0e8388adc21912a057c8'
        SONAR_PROJECT_VERSION = '1.0'
    }
    
    stages {
        stage('Setup') {
            steps {
                sh 'apt-get update'
                sh 'apt-get install -y python3 python3-pip'
                sh 'pip3 install --upgrade pip'
            }
        }
        
        stage('Clone Repository') {
            steps {
                sh 'git clone <repository_url> my_project'
            }
        }
        
        stage('Remove Existing Files') {
            steps {
                sh 'rm results.xml'
                sh 'rm coverage.xml'
            }
        }
        
        stage('Build') {
            steps {
                sh 'pip install -r requirements.txt'
            }
        }
        
        stage('Test') {
            steps {
                sh 'pytest --junitxml=results.xml --cov-report xml --cov=my_project/ my_project/tests/ > coverage.xml'
            }
        }
        
        stage('Linting/Tooling') {
            steps {
                sh 'black .'
                sh 'isort .'
                sh 'mypy .'
            }
        }
        
        stage('Documentation') {
            steps {
                sh 'mkdocs build'
            }
        }
        
        stage('SonarQube Analysis') {
            steps {
                withSonarQubeEnv('SonarQube') {
                    sh 'sonar-scanner'
                }
            }
        }
    }
    
    post {
        always {
            junit 'results.xml'
            cobertura 'coverage.xml'
        }
    }
}
